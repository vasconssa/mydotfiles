" Inspired by fisadev

set rtp+=~/.vim  
set rtp+=~/.vim/plugged/dracula
let vim_plug_just_installed = 0
let vim_plug_path = expand('~/.vim/autoload/plug.vim')
if !filereadable(vim_plug_path)
    echo "Installing Vim-plug..."
    echo ""
    silent !mkdir -p ~/.vim/autoload
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    let vim_plug_just_installed = 1
endif

" manually load vim-plug the first time
if vim_plug_just_installed
    :execute 'source '.fnameescape(vim_plug_path)
endif

"""""""""""""""""""""""""""""""""Enable filtype plugins""""""""""""""""""""""""""""""""""""
filetype plugin indent on

"""""""""""""""""""""""""""""""""Color Scheme Config"""""""""""""""""""""
" set Vim-specific sequences for RGB colors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
set termguicolors
set encoding=utf-8
set nocompatible
set t_Co=256
"colorscheme yaflandia
colorscheme dracula

" background
set background=dark
hi Normal guibg=NONE ctermbg=NONE
"set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 9
"Powerline conf
"set rtp+=/usr/lib/python3.7/site-packages/powerline/bindings/vim
let g:airline_powerline_fonts = 1
set laststatus=2

"C++ syntax
""""""""""""""""""""""""""""""""InterfaceConfig"""""""""""""""""""""""""""""""""""""""
let g:tex_flavor = "latex"
let g:airline_theme='papercolor'
let g:airline#extensions#tabline#enabled = 1

"Common
set hidden
set mouse=a
set number relativenumber
set ruler
set colorcolumn=110
set undofile
set autoindent
set smartindent
set tabstop=4
set shiftwidth=4
set expandtab
set wrap linebreak nolist
set noequalalways
syntax on
set title
set ignorecase
set smartcase
set incsearch
set hlsearch
set showmatch
set comments=sl:/*,mb:\*,elx:\*/
set wildmode=longest:full
set wildmenu
set cul
set backspace=2
set backspace=indent,eol,start
set smarttab
set foldmethod=marker
let g:Tex_BibTeXFlavor = 'biber'
let g:Tex_CompileRule_pdf = 'pdflatex -interaction=nonstopmode $*'
let g:Tex_DefaultTargetFormat = 'pdf'
"let g:bibFileName = mainFileName_root.'.bcf'

"Persistenc session options
set sessionoptions=blank,buffers,folds,help,resize,tabpages,winpos,winsize

"""""""""""""""""""""""""""""""""""""""""""""Plugins""""""""""""""""""""""""""""""""""
"packadd minpac
"call minpac#init({'verbose': 2, 'jobs':8})

call plug#begin('~/.vim/plugged')

    Plug 'calviken/vim-gdscript3'
    Plug 'SirVer/ultisnips'
    Plug 'honza/vim-snippets'
    Plug 'arrufat/vala.vim'
    ""Colors plugin
    Plug 'JBakamovic/yaflandia'
    Plug 'jordwalke/flatlandia'
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    Plug 'tomasiser/vim-code-dark'
    Plug 'mg979/vim-studio-dark'
    Plug 'editorconfig/editorconfig-vim'
    Plug 'dracula/vim', {'as': 'dracula'}
    "packadd vim-studio-dark
    ""FuzzyFinder Plugin
    Plug 'junegunn/fzf.vim'
    ""Dispatch 
    Plug 'tpope/vim-dispatch'
    Plug 'ervandew/supertab'

    ""Some nice shortcuts fo vim commands
    Plug 'tpope/vim-unimpaired'
    "" NerdTree
    Plug 'scrooloose/nerdtree'
    "" TagBar
    Plug 'majutsushi/tagbar'
    ""Git plugin
    Plug 'tpope/vim-fugitive'
    ""Autocomment line
    Plug 'scrooloose/nerdcommenter'
    ""dracula color theme
    Plug 'dracula/vim'
    ""Color pencil theme
    Plug 'reedes/vim-colors-pencil'
    ""Facilitate surrounds vim
    Plug 'tpope/vim-surround'
    ""Shows diff git in side collum
    Plug 'airblade/vim-gitgutter'
    ""Pandoc facilities
    Plug 'vim-pandoc/vim-pandoc'
    Plug 'vim-pandoc/vim-pandoc-syntax'
    Plug 'vimwiki/vimwiki'
    ""Edit latex 
    "call minpac#add('lervag/vimtex'
    ""Better C++ Highlight
    Plug 'octol/vim-cpp-enhanced-highlight'

    ""Doxygen comments
    Plug 'vim-scripts/DoxygenToolkit.vim'
    ""Facilitate close buffers
    "call minpac#add('Asheq/close-buffers.vim')
    ""Switch between header and implementation files
    Plug 'vim-scripts/a.vim'

    " Paint css colors with the real color
    Plug 'lilydjwg/colorizer'

    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    Plug 'tbabej/taskwiki'
    Plug 'mattn/calendar-vim'
    Plug 'ledger/vim-ledger'
    Plug 'tikhomirov/vim-glsl'


call plug#end()

" ============================================================================
" Install plugins the first time vim runs

if vim_plug_just_installed
    echo "Installing Bundles, please ignore key map error messages"
    :PlugInstall
endif

"command! PackUpdate call minpac#update()
"command! PackClean call minpac#clean()

"""""""""""""""""""""""""""""""""PluginConfig"""""""""""""""""""""""""""""""""""""""""

" clear search results
"nnoremap <esc> :noh<CR>

" fzf config
nnoremap <C-p> :<C-u>FZF<CR>

""UtilSnips config

"let g:UltiSnipsExpandTrigger="<tab>"
"let g:UltiSnipsJumpForwardTrigger="<tab>"
"let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

""Supertab config

" Uncomment the this line to disable the plugin
"let loaded_supertab = 1      
" 'user' defined default completion type
let g:SuperTabDefaultCompletionType='<c-x><c-u>'
let g:SuperTabDefaultCompletionType = '<C-n>'
let g:SuperTabContextDefaultCompletionType = "<C-n>"
" 'context' defined default completion type
let g:SuperTabDefaultCompletionType = 'context'
let g:SuperTabCompletionContexts = ['s:ContextText', 's:ContextDiscover']
let g:SuperTabLongestHighlight=1
let g:SuperTabLongestEnhanced=1

""YouCompleteMe config

let g:ycm_global_ycm_extra_conf = '/home/vasconssa/.vim/ycm_extra_conf.py'
let g:ycm_collect_identifiers_from_tags_files = 1

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:ycm_always_populate_location_list = 1

"" Nerdtree config
map <C-n> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

""Tagbar config
nmap <F8> :TagbarToggle<CR>

"""""""""""""""""""""""""""CommandMappings""""""""""""""""""""""""""""""""""""""""""""

"Mapping ycm commands
"nmap <leader>g :YcmCompleter GoTo<CR>
"nmap <leader>t :YcmCompleter GetType<CR>

""Mapping doxgen commands
nmap <leader>d :Dox<CR>
let g:DoxygenToolkit_commentType = "C++"

"""""""""""""""""""""""""""""GeneralConfig""""""""""""""""""""""""""""""""""""""""""""
nmap <leader>w :wa <CR>
nmap <leader>m :wa <bar> Make<CR>

"change grep to ack
set grepprg=ack\ --nogroup\ --column\ $*
set grepformat=%f:%l:%c:%m

"" Populate QuickFix window with Buffer
command! Qbuffers call setqflist(map(filter(range(1, bufnr('$')), 'buflisted(v:val)'), '{"bufnr":v:val}'))
nmap <leader>b :Qbuffers<CR> :copen<CR>
"<
"" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

autocmd filetype lisp,scheme,art setlocal equalprg=scmindent.rkt

function! ZoteroCite()
  " pick a format based on the filetype (customize at will)
  let format = &filetype =~ '.*tex' ? 'citep' : 'pandoc'
  let api_call = 'http://localhost:23119/better-bibtex/cayw?format='.format.'&brackets=1'
  let ref = system('curl -s '.shellescape(api_call))
  return ref
endfunction

noremap <leader>z "=ZoteroCite()<CR>p
inoremap <C-z> <C-r>=ZoteroCite()<CR>

"colorscheme vsdark
let g:Vsd = {}
"let g:Vsd.contrast = 2
"let g:vimwiki_list = [{'path': '~/vimwiki/',
                      "\ 'syntax': 'markdown', 'ext': '.md'}]

let g:pandoc#command#autoexec_on_writes = 0
let g:pandoc#command#autoexec_command = "Pandoc pdf"

let g:pandoc#command#custom_open = "MyPandocOpen"

function! MyPandocOpen(file)
    let file = shellescape(fnamemodify(a:file, ':p'))
    let file_extension = fnamemodify(a:file, ':e')
    if file_extension is? 'pdf'
        if !empty($PDFVIEWER)
            return expand('$PDFVIEWER') . ' ' . file
        elseif executable('zathura')
            return 'zathura ' . file
        elseif executable('mupdf')
        return 'mupdf ' . file
        endif
    elseif file_extension is? 'html'
    if !empty($BROWSER)
            return expand('$BROWSER') . ' ' . file
        elseif executable('firefox')
            return 'firefox ' . file
        elseif executable('chromium')
            return 'chromium ' . file
        endif
    elseif file_extension is? 'odt' && executable('okular')
        return 'okular ' . file
    elseif file_extension is? 'epub' && executable('okular')
        return 'okular ' . file
    else
        return 'xdg-open ' . file
    endif
endfunction

" Trigger configuration. Do not use <tab> if you use
" https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
"
" " If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsSnippetsDir = "~/.vim/snips"
let g:UltiSnipsSnippetDirectories=["snips"]

"markdown syntax - https://github.github.com/gfm/

let vimwiki_vasconssaWiki = {}
let vimwiki_vasconssaWiki.path = '~/games/vasconssa_wiki'
let vimwiki_vasconssaWiki.path_html = '~/games/vasconssa_wiki/html'
let vimwiki_vasconssaWiki.name = 'WikiVasconssa'

let g:vimwiki_list = [vimwiki_vasconssaWiki]
nmap <leader>tl :TaskWikiBufferLoad


let g:ledger_extra_options = '--pedantic --explicit --check-payees'
au FileType ledger noremap { ?^\d<CR>
au FileType ledger noremap } /^\d<CR>

" COC config

set cmdheight=2
set updatetime=300
set shortmess+=c
set signcolumn=yes

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
if has('patch8.1.1068')
  " Use `complete_info` if your (Neo)Vim version supports it.
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current line.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Introduce function text object
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for selections ranges.
" NOTE: Requires 'textDocument/selectionRange' support from the language server.
" coc-tsserver, coc-python are the examples of servers that support it.
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings using CoCList:
" Show all diagnostics.
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
